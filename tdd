不断以tdd测试驱动的方法编写代码 不断在微循环中交付功能 不断小步向前 同时重构代码


先写一个失败的测试 与预期不符
然后写一个正好满足测试的代码
传统的是dlp tdd
前面花很长的时间 区开发 然后花很长时间去找bug

tld 的反馈比较慢  慢反馈导致的有些代码已经有了一定的结构和依赖 面临 推倒重来
许愿 及时反馈微循环  预防bug 开发玩天然带有测试

   
没有强制要求 都是天方夜谭  都交付现场了 还有谁愿意去补测试  
而且想补你也补不上  你开发的时候就没考虑过可测试性 代码好不好测 ,我就帮别人写过测试 就是没法写, 你发现还要把数据库跑起来 互联网联网
先写测试 代码耦合度更低

你写测试的时候相当于 你自己调了一遍 自己写的借口功能 不好好调用 设计的如何 对吧 自己心里有数
而且定位bug时间更短 , 如果后面发现有case没过 就在加进去就行了


活文档 ,就是你去看 你要用一个库 你要看一个组件的源码  ,看到有_test这个文件 就会非常开心, 怎么用 都不用你自己去看文档了 最佳实践都在里面了

而且以后动你更敢动 因为你可以随时测, 保证以前的功能都是对的 更省心

一切都有秩序 内心的平静 周末的时候也能好好休息 没人能打扰你
当你真正习惯了 就你就再也回不去了