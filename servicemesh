管理网络通信
现有的为服务 的问题 

一种轻量化的网络代理
部署在代码旁边

服务注册发现
路由流量转移
弹性能力  熔断限流 快速失败 重试
安全
可观察性
3 健康检查测试


熔断服务发现 这些和业务逻辑不耦合 

公共库 代理
代理模式:
功能比较简陋




故障注入

流量镜像 灰度 

sidecar
使用sidecar处理所有的网络请求
k8s 的所有pod里面 部署多个容器

蓝绿部署 灰度发布 ab测试
故障转移超时重试 熔断
授权身份认证
可观测性

k8s 会给servicemesh 提供支持
servicemesh 是k8s里面的pod , 主要是处在网络方面扩展和延伸
servicemesh  和api网关的异同点

api 网关 服务发现 流量控制, 也有身份验证, 
api网关负责在边界对流量进行抽象



虚拟服务 目标规则 网关服务入口 sidecar

虚拟服务: 把请求流量路有道目标地址 目标规则 针对endpoint  针对uri针对header

假设你的服务部署在不同的集群中 可以通过定义入口的方式被这几个集中起来 用同一个网格进行管理

自动注入
istiod应该把这些配置自动下发到各自对应的istio proxy

promethues  telemetry  连路追踪啊 grafana